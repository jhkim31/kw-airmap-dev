function Windmap() {
    this.gridData =
        [
            6.835, 1.205, 7.062, 1.501, 5.632, 0.295, 6.012, 0.315, 7.821, 0.96, 9.993, 1.942, 8.897, 3.415, 2.017, 0.466, 1.827, -0.813, -0.88, 0.269, 1.749, -2.498, 1.07, -2.403, 1.887, -2.597, 0.329, -3.133, -0.968, -3.881, -0.661, -4.704, -0.46, -5.26, -0.184, -5.277, -0.387, -5.536, -0.087, -4.959, 1.026,
            -2.819, 1.026, -2.819, 1.026, -2.819, 1.026, -2.819, 0.831, -1.064, 0.642, -0.327, 1.539, 0.054, 1.197, -0.87, 0.015, 0.28, -0.309, 0.898, 2.06, 2.209, 3.187, 2.674, 3.26, 2.369, 2.906, 2.806, 0, 10, 0.292, 4.18, 1.919, 4.115, 2.719, 1.834, 4.023, 3.497, 7.079, 3.005, 4.8,
            4.971, 8.792, 10.857, 8.511, 12.618, 3.169, 16.305, 0.746, 21.357, 0, 24.38, -0.893, 25.574, 6.325, 0.665, 6.341, 0.332, 8.504, 1.347, 8.926, 3.073, 8.346, 3.204, 11.055, 3.38, 2.726, 1.046, 0.973, 3.632, 0.311, 0.77, -0.011, 0.65, -0.149, -4.267, 0.302, -3.457, 0.351, -4.015, -0.274,
            -5.233, -0.538, -5.122, -1.082, -6.135, -0.898, -6.387, -0.462, -5.28, -0.594, -4.834, -0.21, -4.014, -0.248, -3.541, 1.026, -2.819, 1.026, -2.819, 0.242, -1.531, 0.052, -0.427, 2.136, -1.991, 2.621, -0.509, 2.939, 0.955, 4.357, 1.086, 1.454, 1.795, 2.689, 2.177, 2.66, 3.53, 3.909, 5.795, 0,
            10, 0, 10, 0, 10, 0, 10, 1.302, 2.791, 3.029, 6.211, 3.866, 4.949, 5.775, 10.003, 10.988, 16.291, 10.424, 17.349, 6.102, 16.764, 5.127, 22.206, 3.504, 24.935, 3.257, 23.172, 8.539, 2.288, 8.718, 3.002, 8.727, 3.005, 9.354, 2.16, 9.425, 1.662, 10.235, 0.716, 12.486,
            1.533, 9.661, 2.77, 2.718, -4.029, 4.079, -6.789, 3.878, -5.971, -0.333, -6.361, 0.756, -7.19, -0.638, -7.292, -1.076, -7.655, -1.09, -6.884, -0.956, -6.035, -0.468, -5.35, -0.25, -4.773, 0, -3.89, 0.05, -2.87, 0.229, -2.62, 0.028, -1.63, 1.024, -1.137, 1.482, -0.629, 2.903, -0.203, 4.525,
            -0.476, 5.383, -0.282, 5.471, 2.1, 4.183, 2.415, 3.846, 3.227, 3.034, 2.637, 1.221, 2.296, 0, 10, 0, 10, 0, 10, 1.27, 5.976, 2.44, 6.358, 2.54, 4.583, 5.638, 9.023, 7.662, 9.131, 7.25, 14.229, 9.565, 16.567, 9.981, 16.612, 9.577, 20.537, 7.698, 23.691, 6.723,
            23.445, 9.92, 2.658, 8.738, 2.506, 9.372, 2.687, 8.756, 3.015, 8.306, 2.071, 10.4, 1.834, 12.133, 1.275, 1.012, -1.62, 2.395, -4.321, 2.731, -5.599, 3.221, -7.235, -0.311, -5.942, 0, -7.9, -0.108, -6.169, -2.106, -6.118, -1.543, -5.757, -1.142, -4.58, -0.702, -4.435, -0.363, -3.451, -0.616,
            -2.299, -0.382, -1.963, 0.314, -1.985, 0.886, -1.474, 1.597, -0.488, 2.34, -0.041, 3.16, -0.055, 4.469, -0.078, 4.917, 1.317, 2.978, 1.026, 5.947, 2.648, 5.611, 4.384, 3.321, 4.743, 7.874, 10.079, 6.063, 12.43, 5.216, 16.054, 8.621, 16.92, 10.737, 13.743, 11.43, 12.257, 8.809, 6.638, 4.26,
            7.379, 7.557, 12.093, 7.154, 11.906, 8.426, 15.201, 11.229, 16.647, 11.732, 17.393, 14.315, 21.223, 10.569, 20.743, 6.94, 2.39, 9.497, 2.723, 8.354, 1.624, 9.718, 1.889, 8.566, 2.95, 2.811, -2.118, 2.582, -2.407, 4.368, -2.13, 0.436, -3.1, 0.548, -4.466, 0.073, -4.209, 0.084, -4.819, -0.205,
            -5.866, 0, -5.72, -1.345, -6.329, -1.456, -4.762, -1, -1.732, -1, -1.732, -1, -1.732, -0.179, -1.014, 0.19, -1.548, 0, -2.46, -0.729, -2.002, 1.183, -1.41, 2.099, -0.723, 2.064, -1.392, 3.236, -1.307, 1.5, -0.901, 3.102, 2.603, 7.795, 1.8, 4.438, 6.108, 7.175, 12.427, 8.122,
            13.518, 8.394, 13.433, 7.868, 14.798, 9.164, 17.235, 12.722, 16.883, 13.195, 14.655, 12.235, 13.12, 10.367, 9.334, 4.939, 9.694, 8.786, 11.66, 10.603, 10.239, 10.88, 14.975, 14.525, 15.041, 16.707, 17.3, 18.415, 17.173, 5.515, 0.972, 8.794, 1.236, 9.331, 2.5, 8.489, 1.497, 2.586, -2.329, 0.749,
            -1.951, 0.895, -1.55, 4.638, -1.156, 1.086, -4.357, -0.271, -3.098, 1.125, -3.092, -0.756, -6.154, -0.757, -6.164, -1.573, -4.323, -0.529, -4.308, -1.266, -4.141, -1, -1.732, -1, -1.732, -1, -1.732, -1.089, -1.677, -0.02, -1.17, -1.545, -0.329, -0.365, -1.362, -0.411, -1.65, 1.767, -1.02, 1.552,
            0.97, 4.25, 1.06, 3.386, -1.725, 4.527, 1.471, -0.771, -0.445, 1.407, -2.762, 4.394, 14.373, 5.626, 15.458, 8.745, 15.147, 9.411, 14.492, 10.136, 15.608, 12.291, 16.917, 14.42, 16.015, 13.69, 13.69, 12.236, 11.816, 10.105, 10.105, 8.443, 9.713, 9.211, 10.596, 11.121, 12.351, 14.521, 13.075, 17.931,
            12.556, 21.101, 13.703, 5.175, 2.413, 11.495, 3.08, 7.077, 2.164, 1.832, -1.236, 0.141, -0.798, 1.195, -0.189, 0.606, -0.491, 2.048, -0.549, 3.01, -2.187, 2.215, -4.348, -0.985, -4.268, -0.982, -3.939, -1.533, -4.453, -1.562, -3.866, -0.524, -3.309, -0.693, -2.266, -0.42, -2.383, -0.224, -2.128, -1.18,
            -2.044, -0.286, -1.237, -1.332, -1.479, -0.3, -0.742, -0.469, -0.559, -0.499, 0.254, 1.192, 0.21, 1.626, 0.56, 1.987, 2.057, 1.61, 3.453, 2.239, 1.399, -0.451, -0.813, -0.914, -0.823, 3.65, 2.75, 4.048, 15.107, 6.767, 15.943, 9.456, 15.738, 10.803, 14.87, 11.603, 15.398, 13.554, 15.592, 14.525,
            15.041, 14.83, 12.892, 13.724, 11.114, 10.845, 9.428, 9.92, 9.579, 11.051, 9.95, 13.816, 10.411, 16.755, 11.301, 20.501, 9.999, 4.339, 0.843, 0, -3.58, 0, -3.58, 0, 1, 0, 1, 2.595, -1.622, -0.09, -2.568, 1.462, -3.136, 2.137, -5.035, 3.857, -4.596, -0.252, -4.813, 1.168,
            -4.687, 2.106, -6.118, -0.47, -5.369, 0, -5.28, -0.422, -3.001, -2.727, -2.13, -0.697, -1.725, -1.428, -0.492, -1.222, -0.888, 0.16, 0.463, -0.624, 0.562, 0.412, 1.02, -0.565, 1.27, 2.015, 0.319, 2.769, 2.969, 0.309, 0.299, 0.36, 1.176, 1.828, -0.972, -2.212, -0.593, 0.203, 0.26, 1.349,
            2.246, 2.541, 11.953, 5.799, 14.353, 7.869, 16.133, 10.065, 15.499, 11.473, 14.167, 13.008, 14.447, 13.729, 14.722, 15.48, 13.938, 15.512, 12.561, 14.782, 9.97, 14.956, 8.29, 11.788, 8.883, 13.745, 9.271, 15.352, 9.224, 17.836, 9.483, 7.54, 0.395, 0, -3.58, -1.392, -2.064, 0, 1, 0,
            1, -2.531, -2.531, -2.531, -2.531, 2.303, -2.947, 1.475, -3.163, -0.549, -2.582, 2.093, -4.108, 1.783, -5.488, 0.476, -6.813, -1.126, -8.011, -2.637, -6.213, -1.27, -3.909, -0.901, -3.143, -1.269, -2.85, -1.213, -2.601, -0.902, -0.383, 0.617, -0.065, -0.026, -1.47, 0.172, 0.221, 1.376, 2.039, 3.41,
            0.787, 3.546, 0.31, 7.909, 0.415, 7.058, -2.709, 3.912, -1.661, 4.851, -1.67, 1.462, 3.136, 2.53, 2.713, 2.772, 9.066, 4.731, 13.738, 6.099, 15.89, 8.906, 16.067, 10.803, 14.87, 12.131, 13.473, 13.502, 13.039, 14.142, 12.734, 15.217, 12.322, 16.1, 10.86, 16.333, 9.43, 16.655, 8.123, 16.44,
            6.978, 15.143, 8.051, 16.94, 6.844, 5.008, 1.436, -0.768, -1.901, 0.375, -0.884, 0.78, -1.6, 1, -1.732, 1, -1.732, -2.531, -2.531, 1.435, -3.551, 0.463, -4.406, 0.388, -4.433, 1.269, -5.495, 1.532, -7.209, 0.492, -7.033, -5.196, -3, -2.833, -4.047, -3.158, -2.844, -2.359, -2.811, -3.538,
            -2.764, -3.658, -0.912, -1.568, 0.602, 0.761, -0.709, 1.466, -1.027, 0.936, 0.477, 2.387, 0.125, 3.669, -0.064, 6.963, -1.103, 11.063, -0.386, 11.77, 0, 7.665, 3.413, 4.303, 3.874, 4.096, 2.868, 5.105, 3.709, 1.422, 7.313, 2.489, 11.708, 5.646, 13.301, 7.464, 14.648, 8.735, 15.129, 11.46,
            14.152, 13.186, 12.296, 13.411, 11.658, 14.631, 11.025, 15.727, 10.608, 16.483, 9.904, 17.607, 8.588, 18.18, 7.717, 18.622, 6.051, 17.88, 5.81, 0.446, -2.531, 0.314, -1.096, 1.014, -0.979, 1.096, -1.565, 1, -1.732, 1, -1.732, 1, -1.732, 1.416, -2.357, 1.856, -4.372, 2.235, -5.265, 1.086,
            -6.855, 0.389, -7.43, -5.196, -3, -5.196, -3, -5.196, -3, -1.849, -5.371, -1.818, -4.084, -2.008, -3.214, -3.031, -2.122, -3.023, -0.318, -1.384, 0.969, 0.86, 1.431, 1.424, 1.475, 2.273, 0.739, 2.393, -1.066, 1.925, -1.733, 8.886, 0.777, 14.019, 4.286, 12.888, 5.207, 8.96, 7.256, 7.535,
            6.785, 5.409, 4.38, 3.8, 6.081, 1.91, 9.826, 3.853, 11.86, 6.493, 12.211, 8.346, 13.357, 10.497, 12.963, 11.948, 12.373, 13.498, 11.326, 14.214, 10.327, 15.333, 9.581, 16.476, 8.76, 17.12, 7.983, 17.895, 7.23, 18.641, 6.057, 19.289, 4.809, -2.954, -0.521, 1.343, -2.525, 2.1, -2.028, 2.559,
            -1.034, 3.028, -0.106, 0.704, 0.44, -3.022, 0.479, -2.37, -1.208, -1.834, -3.052, -0.076, -4.379, 0.5, -5.718, -0.316, -6.032, -5.196, -3, -5.196, -3, -5.196, -3, -2.18, -5.136, -1.514, -4.66, -1.004, -3.091, -1.584, -1.64, -2.637, -0.418, -2.084, 0.33, 0.78, 1.351, 2.554, 2.466, 4.432,
            2.067, 2.06, 0, 2.06, 0, 4.667, -1.078, 11.117, 4.046, 11.117, 4.046, 12.54, 7.24, 11.141, 8.395, 8.004, 8.004, 7.298, 6.571, 0.918, 8.732, 3.956, 10.307, 5.135, 11.012, 7.694, 11.408, 9.182, 11.339, 10.913, 11.301, 12.916, 10.837, 14.284, 9.635, 14.983, 9.003, 15.481, 8.581, 16.565,
            8.079, 17.19, 6.945, 17.873, 5.464, 18.746, 4.674, -2.954, -0.521, 1.199, -0.042, 3.063, 0.322, 4.347, -0.611, 4.476, -1.993, 3.856, -1.881, 3.413, -1.739, 2.909, -1.357, -0.441, -3.593, -0.809, -4.589, 0.65, -2.816, -1.359, -2.015, -2.897, -3.218, -2.77, -3.957, -0.786, -4.044, -0.188, -3.585, -0.837,
            -3.357, -0.893, -3.332, 0.572, -1.759, 1.736, 0.667, 1.718, 1.718, 1.179, 2.418, 1.561, 1.796, 0.893, 5.062, 2.06, 0, 2.06, 0, 2.06, 0, 11.117, 4.046, 11.117, 4.046, 11.284, 6, 11.023, 6.623, 10.244, 6.401, 8.586, 9.208, 10.35, 7.8, 3.851, 10.581, 4.308, 11.222, 6.545,
            10.473, 7.434, 10.616, 9.637, 10.334, 11.192, 10.077, 12.443, 9.721, 13.455, 9.076, 14.921, 8.271, 15.675, 7.645, 16.187, 7.548, 17.337, 6.655, 17.956, 5.834, 3.762, -3.633, 3.908, -4.34, 4.53, -2.408, 4.334, -2.708, 4.529, -2.83, 4.41, -2.756, 4.25, -2.166, -0.758, -1.555, -2.21, -1.126, -0.859,
            -0.989, 0.288, -0.14, -0.318, -0.318, -0.318, -0.318, 0.899, -2.019, -1.699, -2.098, 0.418, -3.404, 2.667, -5.719, 3.069, -4.073, 1.982, -1.848, 2.586, -0.136, 3.594, 2.075, 3.111, 3.708, 3.304, 3.937, 3.304, 3.937, 2.758, 2.314, 2.415, -0.879, 3.872, -1.409, 3.872, -1.409, 3.872, -1.409, 9.989,
            6.487, 9.182, 6.671, 9.588, 9.588, 8.82, 8.225, 9.702, 9.702, 11.142, 8.705, 9.683, 7.841, 5.799, 9.652, 7.026, 10.035, 8.549, 10.188, 9.927, 10.279, 10.394, 10.038, 11.214, 10.097, 11.924, 8.985, 5.574, 0.983, 5.574, 0.983, 5.574, 0.983, 17.867, 7.219, 4.35, -1.67, 3.689, -3.82, 3.826,
            -4.103, 0, 2.24, 0, 2.24, 0.948, -0.948, 0.948, -0.948, 0.948, -0.948, 1.966, -0.418, 0.747, -1.243, -0.318, -0.318, -0.318, -0.318, -0.318, -0.318, 0.861, -4.05, 3.407, -4.06, 4.249, -4.719, 5.17, -4.494, 4.563, -3.195, 4.935, -1.509, 3.546, 0.31, 3.154, 1.895, 3.766, 3.274, 3.304,
            3.937, 4.336, 3.638, 4.336, 3.638, 3.156, 2.648, 3.156, 2.648, 3.872, -1.409, 3.872, -1.409, 4.399, 3.08, 9.184, 6.921, 9.43, 7.913, 9.118, 8.21, 9.653, 8.391, 9.951, 8.35, 11.78, 8.877, 12.153, 7.594, 11.694, 6.482, 8.411, 9.675, 9.313, 9.313, 11.021, 9.923, 9.521, 10.21, 10.694,
            8.659, 5.574, 0.983, 5.574, 0.983, 4.057, -0.715, 7.705, 3.113, 3.507, -3.507, 3.201, -3.091, 3.392, -3.768, 0, 2.24, 0, 2.24, 0, 2.24, 0.948, -0.948, 0.948, -0.948, 2.079, -2.079, 2.228, -3.43, 0, -5, 0, -5, 0, -5, 6.675, -6.446, 6.848, -5.747, 6.023,
            -4.877, 6.131, -3.831, 5.312, -2.591, 5.047, -1.165, 5.47, 0.575, 3.256, 1.88, 3.406, 3.783, 3.585, 5.12, 0.983, 5.574, 3.156, 2.648, 3.156, 2.648, 3.6, 0, 3.6, 0, 5.754, 1.87, 10.211, 5.203, 9.763, 3.554, 7.849, 7.849, 8.937, 7.237, 9.487, 8.247, 10.647, 7.735, 12.142,
            7.01, 12.608, 6.704, 12.303, 8.298, 13.175, 7.916, 14.066, 6.861, 13.374, 8.357, 14.251, 5.758, 12.665, 2.233, 12.665, 2.233, 4.057, -0.715, 4.057, -0.715, 5.125, -4.3, 3.29, -2.479, 3.248, -2.631, 2.549, -3.262, 2.588, -3.434, 3.332, -2.796, 3.381, -2.939, 4.619, -3.876, 4.204, -3.405, 3.226,
            -4.129, 2.928, -2.827, 0, -5, 0, -5, 0, -5, 7.274, -5.89, 6.966, -5.061, 6.773, -4.569, 6.718, -3.423, 6.059, -2.326, 5.199, -0.731, 5.193, 1.009, 5.474, 2.67, 2.782, 4.452, 0.983, 5.574, 0.983, 5.574, 0.983, 5.574, 3.6, 0, 3.6, 0, 5.914, 4.962, 5.914,
            4.962, 8.634, 4.399, 10.487, 7.074, 11.449, 6.61, 9.006, 5.628, 9.395, 5.645, 11.224, 6.48, 12.34, 6.288, 9.622, -1.697, 9.622, -1.697, 14.92, 0, 2.415, -0.879, 2.415, -0.879, 13.843, 8.318, 12.665, 2.233, 12.665, 2.233, 4.057, -0.715, 5.125, -4.3, 5.125, -4.3, 4.686, -2.087, 4.054,
            -2.533, 3.313, -2.88, 3.52, -2.851, 4.086, -2.968, 4.189, -3.392, 0, 2.68, 0, 2.68, 4.197, -3.398, 3.254, -3.743, 3.16, -7.098, 5.305, -6.551, 6.138, -6.138, 6.388, -6.169, 6.604, -6.377, 6.577, -4.779, 6.585, -3.355, 6.344, -1.819, 5.487, -0.192, 5.24, 1.703, 5.251, 3.677, 3.521,
            4.846, -0.893, 5.062, 0.983, 5.574, 0.983, 5.574, 3.522, 2.466, 5.319, 1.936, 5.319, 1.936, 3.966, 4.726, 3.966, 4.726, 12.152, 7.892, 11.697, 8.191, 10.903, 7.08, 10.74, 6.453, 11.365, 5.3, 9.26, 0, 9.26, 0, 9.622, -1.697, 14.92, 0, 2.415, -0.879, 2.415, -0.879, 2.218,
            -0.312, 2.218, -0.312, 4.057, -0.715, 3.545, 0.625, -0.312, -4.459, -0.312, -4.459, 4.706, -1.087, 4.141, -2.202, 3.822, -2.986, 3.83, -3.214, 3.731, -3.359, 3.575, -3.452, 0, 2.68, 0, 2.68, 0, 2.68, 4.703, -4.385, 2.865, -5.622, 3.959, -5.87, 4.738, -6.521, 5.683, -7.273, 6.189,
            -6.874, 6.435, -5.211, 6.558, -3.341, 6.304, -1.455, 5.557, 0.194, 4.952, 2.102, 4.213, 3.928, 4.116, 5.463, -0.893, 5.062, -0.893, 5.062, -0.893, 5.062, 3.349, 4.287, 5.319, 1.936, 5.319, 1.936, 3.966, 4.726, 3.966, 4.726, 10.437, 8.452, 11.269, 8.804, 11.496, 8.352, 7.578, 4.375, 7.578,
            4.375, 9.26, 0, 9.26, 0, 7.091, 1.25, 7.091, 1.25, 2.415, -0.879, 9.669, 3.519, 5.319, -1.936, 2.218, -0.312, 9.461, 7.938, 9.461, 7.938, 1.825, 3.582, 9.26, 0, 3.913, -2.949, 3.967, -2.576, 2.991, -2.789, 3.189, -3.189, 3.493, -3.493, 2.943, -2.65, 0, 2.68, 0,
            2.68, 3.111, -4.129, 3.619, -4.469, 4.363, -5.019, 2.773, -5.003, 3.433, -7.71, 4.616, -7.386, 5.76, -6.626, 6.007, -4.865, 6.139, -3.128, 5.83, -1.239, 5.426, 0.957, 4.997, 2.657, 4.092, 4.388, 4.821, 6.17, -0.893, 5.062, -0.893, 5.062, 4.485, 6.406, 5.122, 7.594, 8.652, 8.068, 0.909,
            1.949, 4.057, 0.715, 4.057, 0.715, 4.057, 0.715, 9.873, 9.207, 5.343, 3.085, 7.578, 4.375, 7.578, 4.375, 7.72, 0, 7.72, 0, 7.091, 1.25, 7.734, 2.815, 4.63, 8.019, 11.148, 1.966, 11.83, 0, 11.83, 0, 8.019, 4.63, 8.019, 4.63, 1.825, 3.582, 9.26, 0, 3.409,
            -2.86, 3.592, -3.123, 3.14, -3.14, 2.492, -3.43, 2.832, -3.497, 1.998, -3.92, 1.893, -4.06, 1.813, -4.271, 2.092, -4.486, 2.39, -3.977, 3.009, -3.993, 2.968, -4.571, 1.074, -7.645, 2.997, -7.06, 4.784, -6.123, 5.424, -4.551, 5.247, -2.227, 5.123, -0.268, 4.605, 1.586, 4.904, 3.695, 3.96,
            5.255, 3.86, 6.686, 4.121, 7.434, 3.304, 3.937, 6.43, 8.851, 6.545, 9.347, 6.236, 9.603, 5.872, 8.705, 4.057, 0.715, 4.057, 0.715, 5.29, 6.305, 5.29, 6.305, 8.461, 4.885, 7.127, 4.115, 4.83, 1.758, 9.669, 3.519, 9.669, 3.519, 7.734, 2.815, 7.734, 2.815, 9.062, 7.604, 4.63,
            8.019, 6.175, 10.695, 6.175, 10.695, 8.019, 4.63, 8.019, 4.63, 12.401, 7.16, 13.915, 7.713, 2.619, -2.712, 3, -2.897, 2.549, -3.147, 2.195, -3.802, 2.029, -3.983, 1.326, -4.08, 1.273, -4.441, 1.053, -5.419, 1.216, -4.239, 1.108, -4.134, 2.318, -3.857, 2.768, -3.674, -0.371, -7.08, 1.566,
            -6.782, 3.562, -5.281, 4.37, -3.799, 4.58, -2.334, 4.53, 0, 4.181, 2.317, 3.649, 3.913, 3.932, 6.055, 3.239, 7.631, 3.304, 3.937, 3.304, 3.937, 3.304, 3.937, 6.894, 9.846, 6.139, 10.217, 5.88, 10.184, 5.671, 9.437, 1.499, -1.665, 1.499, -1.665, 5.29, 6.305, 8.461, 4.885, 5.516,
            4.628, 5.516, 4.628, 9.669, 3.519, 9.669, 3.519, 2.993, 8.222, 2.993, 8.222, 9.062, 7.604, 6.175, 10.695, 6.175, 10.695, 6.175, 10.695, 11.7, 6.755, 11.939, 6.618, 11.279, 7.048, 13.006, 7.209, 2.723, -2.82, 2.363, -3.252, 1.714, -3.223, 1.5, -3.217, 1.174, -3.614, 0.478, -3.891, 0.518,
            -4.218, 0.738, -4.662, 0.815, -4.192, 1.009, -4.046, 1.514, -4.397, 1.695, -3.634, -1.649, -6.153, -0.094, -5.389, 1.778, -4.631, 2.939, -3.152, 2.931, -1.494, 3.588, 0.125, 3.273, 2.045, 2.83, 4.195, 2.733, 6.139, 2.393, 8.344, 2.697, 10.065, 3.304, 3.937, 3.181, 8.739, 5.131, 11.003, 5.77,
            9.994, 1.25, 7.091, 1.25, 7.091, 7.094, 5.952, 7.094, 5.952, 6.235, 3.6, 5.062, 0.893, 4.018, -0.14, 5.516, 4.628, 9.809, 11.69, 4.129, 2.891, 2.993, 8.222, 2.993, 8.222, 6.731, 6.97, 6.841, 6.606, 2.659, 6.927, 9.524, 9.197, 11.146, 10.394, 12.123, 9.136, 12.848, 8.028, 13.147,
            6.99, 2.136, -3.167, 2.362, -2.446, 1.026, -2.54, 0.992, -2.725, 0.301, -3.437, -0.141, -4.038, -0.341, -3.895, 0, 0.89, 0.128, -3.678, -0.127, -3.648, 0.731, -4.146, 0.848, -3.673, 1.172, -3.835, -2.573, -5.276, -0.691, -3.92, 1.72, -2.863, 1.966, -0.418, 1.857, 1.253, 2.215, 2.939, 2.037,
            4.368, 1.646, 6.143, 1.761, 8.285, 2.767, 9.651, 2.758, 11.061, -0.287, 3.277, 3.961, 10.882, 4.926, 11.063, 1.25, 7.091, 1.25, 7.091, 7.094, 5.952, 7.094, 5.952, 5.062, 0.893, 5.062, 0.893, 11.32, 0, 2.475, 8.632, 8.45, 15.245, 11.573, 13.313, 10.649, 9.589, 12.792, 8.628, 12.817,
            7.4, 10.243, 6.155, 9.396, 5.425, 6.569, 5.915, 7.162, 8.844, 10.393, 9.691, 12.297, 8.934, 12.454, 8.088, 1.195, -2.958, 1.807, -0.881, -0.775, -0.151, -0.572, -1.759, -2, -3.464, -2, -3.464, -0.779, -3.124, -1.5, -2.598, -1.5, -2.598, -1.972, -3.036, -0.889, -3.849, 0.584, -3.004, -1.48,
            -2.905, 0.119, -3.418, -1.249, -4.355, 0.491, -1.512, 1.086, 0.733, 0.553, 2.602, 0.624, 3.941, 0.278, 5.313, 0.746, 7.101, 1.015, 8.268, 1.601, 9.08, 1.902, 9.787, 2.95, 8.566, 1.716, 9.73, 3.665, 11.28, 4.987, 11.2, 3.926, 11.403, 4.763, 11.221, 5.306, 12.5, 5.4, 9.353, 5.4,
            9.353, 11.32, 0, 11.32, 0, 3.927, 7.707, 7.558, 13.635, 10.85, 12.931, 11.614, 10.83, 12.155, 9.16, 13.115, 7.88, 12.774, 7.375, 11.315, 6.799, 9.683, 6.531, 7.308, 8.71, 8.812, 9.787, 10.815, 9.401, 0.81, -2.826, 0.874, -1.399, -0.76, 0.553, -2.5, -0.044, -2, -3.464, -2,
            -3.464, -1.025, -2.302, -1.5, -2.598, -1.5, -2.598, 0.948, -0.948, -2.782, -3.435, 0.045, -2.58, 1.5, -2.598, 1.5, -2.598, -3.464, -2, 0.003, -0.05, -0.107, 2.047, -0.245, 3.501, -0.612, 4.983, -0.701, 6.673, -0.138, 7.879, 0.286, 8.185, 0.976, 9.289, 1.747, 9.907, 3.892, 10.694, 0.367,
            7.01, 2.282, 11.74, 3.465, 12.083, 4.379, 11.408, 5.322, 12.537, 5.763, 12.945, 5.4, 9.353, 5.4, 9.353, 11.32, 0, 11.32, 0, 4.397, 4.553, 5.156, 7.364, 6.819, 10.5, 9.795, 11.268, 11.687, 10.898, 11.844, 9.253, 11.141, 8.395, 11.88, 8.013, 11.996, 8.092, 11.406, 7.407, 10.995,
            7.14, 10.836, 7.309, -0.978, -2.688, -0.56, -0.743, 1.261, -0.985, -0.426, -1.708, 0.239, -2.277, -0.225, -1.604, 0.104, -1.486, -0.228, -0.292, -1.643, -0.631, 0.948, -0.948, 0.948, -0.948, -2.44, -3.757, 1.5, -2.598, 1.5, -2.598, -3.464, -2, -3.464, -2, -1.057, 2.904, -1.699, 4.425, -1.418,
            5.686, -0.759, 7.22, -0.56, 8.01, -0.32, 9.154, 0, 10.25, 0.756, 10.814, 1.973, 11.187, 4.06, 10.577, 0.389, 11.133, 3.915, 12.05, 3.401, 12.692, 4.255, 13.096, 6.012, 13.502, 10.25, 8.6, 10.25, 8.6, 10.25, 8.6, 9.895, 6.929, 5.595, 6.909, 4.978, 6.147, 6.564, 8.106, 6.56,
            9.029, 8.446, 10.066, 10.7, 9.978, 11.642, 9.427, 11.657, 8.162, 10.359, 8.389, 11.165, 8.413, 11.714, 7.901, 11.695
        ]
    this.cn = document.getElementById('cw')              // 캔버스 객체
    this.c = this.cn.getContext('2d');                        // 캔버스
    this.a = []                                          // 바람 하나하나 객체의 배열
    this.cnx;                                            // 캔버스 width
    this.cny;                                            // 캔버스 height
    this.grid = []                                       // 위도 경도에 따른 그리드 배열
    this.currentFrame = 0                                // 애니메이션의 현재 프레임
    this.animationId                                     // 애니메이션 아이디 (정지시 필요)
    this.minlat = 31
    this.maxlat = 44
    this.minlng = 115
    this.maxlng = 138
    this.gap = 0.5
    this.showWind = false
    this.coordinate;

    this.speed7 = {
        "dom": document.getElementById('speed7'),
        "color": "",
        "picker": document.getElementById('picker7')
    }
    this.speed5 = {
        "dom": document.getElementById('speed5'),
        "color": "",
        "picker": document.getElementById('picker5')
    }
    this.speed3 = {
        "dom": document.getElementById('speed3'),
        "color": "",
        "picker": document.getElementById('picker3')
    }
    this.speed1 = {
        "dom": document.getElementById('speed1'),
        "color": "",
        "picker": document.getElementById('picker1')
    }
    this.speed0 = {
        "dom": document.getElementById('speed0'),
        "color": "",
        "picker": document.getElementById('picker0')
    }
    this.latgap = (this.maxlat * 10 - this.minlat * 10) / 10
    this.lnggap = (this.maxlng * 10 - this.minlng * 10) / 10
    this.windCount = 500;
    this.showSpeed = 1

    this.init = () => {
        this.cn.width = window.innerWidth
        this.cn.height = window.innerHeight
        this.cnx = cn.width - 1
        this.cny = cn.height - 1
        this.coordinate = map.getProjection()
        this.c.linewidth = "1";
        this.windCount = document.getElementById("range1").value
        this.showSpeed = document.getElementById("range2").value

        this.speed7.color = this.speed7.picker.value
        this.speed7.dom.style.backgroundColor = this.speed7.color

        this.speed5.color = this.speed5.picker.value
        this.speed5.dom.style.backgroundColor = this.speed5.color

        this.speed3.color = this.speed3.picker.value
        this.speed3.dom.style.backgroundColor = this.speed3.color

        this.speed1.color = this.speed1.picker.value
        this.speed1.dom.style.backgroundColor = this.speed1.color

        this.speed0.color = this.speed0.picker.value
        this.speed0.dom.style.backgroundColor = this.speed0.color
    }

    this.build = () => {
        a = [];
        for (var i = 0; i < this.windCount; i++) {
            buildobj(i)
        }
    }

    this.buildobj = (i) => {
        var x = getRandomArbitrary(0, this.cnx)
        var y = getRandomArbitrary(0, this.cny)
        var point = new kakao.maps.Point(x, y)
        a[i] = new ob(x, y, this.coordinate.coordsFromContainerPoint(point).Ma, this.coordinate.coordsFromContainerPoint(point).La, i, this.currentFrame)
    }

    this.removeObj = (index) => {
        buildobj(index)
        return 0;
    }

    this.ob = (x, y, latitude, longitude, index, frame) => {
        this.index = index                              // 객체배열에서 인덱스(삭제시 필요)
        this.x = x;                                     // 화면에서의 x 좌표
        this.y = y;                                     // 화면에서의 y 좌표
        this.latitude = latitude;                       // 지도에서의 위도
        this.longitude = longitude;                     // 지도에서의 경도
        this.frame = frame                              // 생성될 당시 프레임
        this.coordinate = map.getProjection()
        //바람 객체 이동 함수 (현재 좌표의 벡터를 받아 그 벡터 방향으로 이동)
        this.dr = function () {
            if (this.x > cnx || this.y > cny || this.x < 0 || this.y < 0) {                 //만약 캔버스 범위를 벗어나면 삭제
                return removeObj(this.index)
            } else {
                if (currentFrame - this.frame > getRandomArbitrary(100, 250)) {             // 100프레임 (1 ~ 2초) 에서 250프레임 (4초정도) 지나면 삭제
                    removeObj(this.index)
                }
                const ls = {                                                                // 이동을 위한 현재 위치 기록
                    x: this.x,
                    y: this.y
                };

                var nextVec = getVector(this.latitude, this.longitude)                          // 현재 좌표에서 벡터 계산
                this.x = ls.x + nextVec[0] * showSpeed                                                  // 현재 좌표에서 벡터만큼 이동                                                                                                      
                this.y = ls.y + nextVec[1] * showSpeed                                            // 현재 좌표에서 벡터만큼 이동                                                                                                      

                var point = new kakao.maps.Point(this.x, this.y)
                this.latitude = coordinate.coordsFromContainerPoint(point).Ma               // 이동한 만큼 다시 현재 위치 계산
                this.longitude = coordinate.coordsFromContainerPoint(point).La              // 이동한 만큼 다시 현재 위치 계산

                c.beginPath();
                c.lineWidth = 2;
                if (nextVec[2] > 7) {
                    c.strokeStyle = speed7.color;
                } else if (nextVec[2] > 5) {
                    c.strokeStyle = speed5.color;
                } else if (nextVec[2] > 3) {
                    c.strokeStyle = speed3.color;
                } else if (nextVec[2] > 1) {
                    c.strokeStyle = speed1.color;
                } else {
                    c.strokeStyle = speed0.color;
                }
                c.moveTo(ls.x, ls.y);
                c.lineTo(this.x, this.y);
                c.stroke();
                c.closePath();

                //기록한 현재 위치와 바뀐 위치까지 그림.
            }
        }
    }

    this.getVector = (latitude, longitude) => {
        if (latitude <= minlat || latitude >= maxlat) return [0, 0, 0]             // 만약 위도 33 이하, 38 이상이면 1, -1 벡터 리턴
        if (longitude <= minlng || longitude >= maxlng) return [0, 0, 0]         // 만약 경도 124 이하, 130 이상이면 1, -1 벡터 리턴

        var gridn = selectGrid(latitude, longitude);                            // 현재 벡터에서 그리드 계산
        var g00 = grid[gridn[0]][gridn[1]]
        var g10 = grid[gridn[0]][gridn[1] + 1]
        var g01 = grid[gridn[0] + 1][gridn[1]]
        var g11 = grid[gridn[0] + 1][gridn[1] + 1]
        // 현재 좌표를 감싸는 네(4) 그리드 계산

        return interpolate(latitude, longitude, g00, g10, g01, g11, gridn)      // 4 그리드로 보간값 구해서 리턴
    }

    this.selectGrid = (latitude, longitude) => {

        var gridlng = Math.floor(((longitude * 10 - minlng * 10) / (gap * 10)))
        var gridlat = Math.floor(((maxlat * 10 - latitude * 10) / (gap * 10)))

        return [gridlat, gridlng]
    }

    this.interpolate = (latitude, longitude, g00, g10, g01, g11, gridn) => {
        var x = (longitude % gap) * (1 / gap)

        var d1 = x
        var d2 = 1 - x

        var x1_vector_x
        var x1_vector_y
        var x2_vector_x
        var x2_vector_y
        try {
            x1_vector_x = d1 * g10[0] + d2 * g00[0]
            x1_vector_y = d1 * g10[1] + d2 * g00[1]
            x2_vector_x = d1 * g11[0] + d2 * g01[0]
            x2_vector_y = d1 * g11[1] + d2 * g01[1]
        } catch (error) {
            debugger;
        }


        var y = (latitude % gap) * (1 / gap)
        var d4 = y
        var d3 = 1 - y

        var result_vector_x = d3 * x2_vector_x + d4 * x1_vector_x
        var result_vector_y = d3 * x2_vector_y + d4 * x1_vector_y
        var result_vector_scale = Math.sqrt(result_vector_x * result_vector_x + result_vector_y * result_vector_y)

        var result_vector = [result_vector_x, result_vector_y, result_vector_scale]
        return result_vector                //보간값 리턴
    }

    this.readGrid = () => {
        debugger;
        var count = 0;
        for (var i = 0; i < ((latgap * 10) / (gap * 10)) + 1; i++) {
            grid[i] = []
            for (var j = 0; j < ((lnggap * 10) / (gap * 10)) + 1; j++) {
                grid[i][j] = []
                grid[i][j][0] = gridData[count++]
                grid[i][j][1] = gridData[count++]
                grid[i][j][2] = count / 2
            }
        }
    }

    this.getRandomArbitrary = (min, max) => {
        return Math.random() * (max - min) + min;
    }

    this.anim = () => {
        currentFrame++
        animationId = requestAnimationFrame(anim)
        c.fillStyle = "rgba(255, 255, 255, 0.2)"
        c.fillRect(0, 0, cn.width, cn.height);
        a.forEach(function (e, i) {
            e.dr();
        });
    }

    this.stopAnim = () => {
        cancelAnimationFrame(animationId)
    }

    this.windCountDiv = document.getElementById('windCount');
    this.gauge = document.getElementById('range1');
    this.windCountDiv.innerHTML = gauge.value

    this.showSpeedDiv = document.getElementById("showSpeed");
    this.gauge2 = document.getElementById("range2");
    this.showSpeedDiv.innerHTML = gauge2.value
    ///어떻게 작동할지 모르겠음.
    this.gauge.oninput = () => {
        this.windCountDiv.innerHTML = _this.value
        this.windCount = _this.value
        this.build()
    }


    this.gauge2.oninput = () => {
        showSpeedDiv.innerHTML = _this.value
        showSpeed = _this.value
        this.build()
    }

    this.toggleWindLayer = () => {
        if (showWind) {
            a = []
            stopAnim()
            init()
            showWind = !showWind
        } else {
            build()
            anim()
            showWind = !showWind
        }
    }

    document.getElementById('playWind').addEventListener('click', this.toggleWindLayer)

    this.speed7.picker.addEventListener("input", e => {
        this.speed7.color = e.target.value
        this.speed7.dom.style.backgroundColor = this.speed7.color
    }, false)

    this.speed5.picker.addEventListener("input", e => {
        this.speed5.color = e.target.value
        this.speed5.dom.style.backgroundColor = this.speed5.color

    }, false)

    this.speed3.picker.addEventListener("input", e => {
        this.speed3.color = e.target.value
        this.speed3.dom.style.backgroundColor = this.speed3.color
    }, false)

    this.speed1.picker.addEventListener("input", e => {
        this.speed1.color = e.target.value
        this.speed1.dom.style.backgroundColor = this.speed1.color
    }, false)

    this.speed0.picker.addEventListener("input", e => {
        this.speed0.color = e.target.value
        this.speed0.dom.style.backgroundColor = this.speed0.color
    }, false)
}



var container = document.getElementById('map');                 //지도를 그릴 element
var options = {
    center: new kakao.maps.LatLng(37.151198243701934, 128.22723681773422),
    level: 12
};                                                              //지도의 설정 정보

var map = new kakao.maps.Map(container, options);               // container element에 맵 객체 생성

var mapProjection = map.getProjection()
var point;

// 카카오맵 변수 선언 -------------------------------------------------------------------- END

// 카카오맵 이벤트 등록 ------------------------------------------------------------------- START


var x = new Windmap();

window.onload = () => {
    x.init();
    x.readGrid();
}


container.addEventListener('click', e => {
    var point = new kakao.maps.Point(e.pageX, e.pageY)
    console.log(point, mapProjection.coordsFromContainerPoint(point))
    var windSpeed = document.getElementById('windSpeed')
    var vector = getVector(mapProjection.coordsFromContainerPoint(point).Ma, mapProjection.coordsFromContainerPoint(point).La)
    var pm10 = getValue(e.pageX, e.pageY)
    windSpeed.innerHTML =
        `${mapProjection.coordsFromContainerPoint(point).Ma.toFixed(3)}, ${mapProjection.coordsFromContainerPoint(point).La.toFixed(3)}, 
    vector : ${vector[0].toFixed(3)}, ${vector[1].toFixed(3)} scale: ${vector[2].toFixed(3)}m/s zoomLevel: ${map.getLevel()}. pm10 : ${pm10}`
})

kakao.maps.event.addListener(map, 'drag', () => {
    if (showWind) {
        stopAnim()
        init()
    }
})

kakao.maps.event.addListener(map, 'dragend', () => {
    if (showWind) {
        build()
        anim()
    }
})

